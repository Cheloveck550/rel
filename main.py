import asyncio
import logging
import secrets
import uuid
from decimal import Decimal

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

from aiocryptopay import AioCryptoPay, Networks
from yoomoney import Quickpay, Client

import aiosqlite
from datetime import datetime, timezone, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
BOT_TOKEN = "8204126907:AAGAuUipqhzEkyfreOFCpBhMdaXtQ5xMN_o"
YOOMONEY_WALLET = "4100118758572112"
YOOMONEY_TOKEN = "4100118758572112.13EBE862F9FE5CEF1E565C77A561584DD5651427DF02D3214BA6FCBF9BCD9CCBFFA058B13F34A4DB6BAF7214DAFB06E57B32E3B55ECC159676A6CE6F5B3BC5C8C37C2CE1FDA52E818E2A1B7518FEE6E2FDF2E1CC630F03A8771818CE4D7C576873CFF7D0EC73EFE5E8CA9C95C072B5E64629B35532F6AF1DDE8ADD144B8B5B07"
REFERRAL_PERCENT = 0.2        # 20% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
YOOMONEY_FEE_PERCENT = 0.05    # 5% –∫–æ–º–∏—Å—Å–∏—è YooMoney
VPN_SUBSCRIPTION_PRICE = 100   # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö

DOMAIN = "64.188.64.214"       # –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ http://<DOMAIN>/subs/<token>

# –ö–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ vless (PUBLIC KEY –∏ SHORT ID)
PUBLIC_KEY = "m7n-24tmvfTdp2-Szr-vAaM3t9NzGDpTNrva6xM6-ls"
SHORT_ID   = "ba4211bb433df45d"

DB_PATH = "bot_database.db"             # –ª–æ–∫–∞–ª—å–Ω–æ —Ä—è–¥–æ–º —Å main.py
DB_ABS  = "/root/rel/bot_database.db"   # –¥–ª—è server.py –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ----------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoPay
# crypto_pay = AioCryptoPay('457050:AAeSxxok8YAr7DgKK7s965MGgAyjHoDL6yP', network=Networks.MAIN_NET) # –æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å
crypto_pay = AioCryptoPay(token='47563:AAzvRdC9XPKzyMpvayG5Hdji1HrPx1E4zoL', network=Networks.TEST_NET)  # —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å

# ======================= FSM =======================
class PaymentState(StatesGroup):
    waiting_for_payment_method = State()
    waiting_for_cryptobot_amount = State()
    waiting_for_yoomoney_amount = State()
    waiting_for_vpn_confirmation = State()

# =================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance REAL DEFAULT 0,
                vpn_active_until DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                referrer_id INTEGER,
                referral_id INTEGER PRIMARY KEY,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                type TEXT,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS referral_earnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                referral_id INTEGER,
                amount REAL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                token TEXT UNIQUE,
                expires_at TEXT,
                traffic_limit_gb REAL
            )
        ''')
        # —Ç–∞–±–ª–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é —á–∏—Ç–∞–µ—Ç server.py –¥–ª—è –≤—ã–¥–∞—á–∏ —Å—Å—ã–ª–∫–∏ HappVPN
        await db.execute('''
            CREATE TABLE IF NOT EXISTS vpn_links (
                user_id INTEGER PRIMARY KEY,
                vpn_link TEXT,
                expires_at DATETIME
            )
        ''')
        await db.commit()

# ===================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====================
def main_menu_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")
    kb.button(text="üîê –ö—É–ø–∏—Ç—å VPN", callback_data="buy_vpn")
    kb.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")
    kb.button(text="üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.adjust(1)
    return kb.as_markup()

def confirm_cancel_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_vpn")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
    kb.adjust(2)
    return kb.as_markup()

def payment_methods_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üíé CryptoBot (0%)", callback_data="payment_cryptobot")
    kb.button(text=f"üí≥ YooMoney (+{int(YOOMONEY_FEE_PERCENT*100)}%)", callback_data="payment_yoomoney")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    kb.adjust(1)
    return kb.as_markup()

def back_to_payment_methods_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_payment_methods")
    return kb.as_markup()

# =================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===================
async def get_user_balance(user_id: int) -> float:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        result = await cursor.fetchone()
        return result[0] if result else 0.0

async def add_vpn_link(user_id: int, user_uuid: str):
    """
    –°–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ç–æ–≤—É—é VLESS —Å—Å—ã–ª–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ vpn_links.
    """
    expires_at = (datetime.utcnow() + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
    vpn_link = (
        f"vless://{user_uuid}@{DOMAIN}:443?"
        f"type=tcp&security=reality&pbk={PUBLIC_KEY}"
        f"&sni=www.google.com&flow=xtls-rprx-vision&sid={SHORT_ID}#Pro100VPN"
    )
    async with aiosqlite.connect(DB_PATH) as db:
        # –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º)
        await db.execute(
            "INSERT OR REPLACE INTO vpn_links (user_id, vpn_link, expires_at) VALUES (?, ?, ?)",
            (user_id, vpn_link, expires_at)
        )
        await db.commit()

# ======================== –•—ç–Ω–¥–ª–µ—Ä—ã ========================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except ValueError:
            referrer_id = None

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        if referrer_id and referrer_id != user_id:
            cursor = await db.execute('SELECT 1 FROM users WHERE user_id = ?', (referrer_id,))
            if await cursor.fetchone():
                await db.execute('INSERT OR IGNORE INTO referrals (referrer_id, referral_id) VALUES (?, ?)', (referrer_id, user_id))
        await db.commit()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

@dp.callback_query(F.data == "top_up_balance")
async def top_up_balance(callback: types.CallbackQuery):
    await callback.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard())

@dp.callback_query(F.data == "back_to_payment_methods")
async def back_to_payment_methods(callback: types.CallbackQuery):
    await callback.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard())

# -------------------- CryptoBot --------------------
@dp.callback_query(F.data == "payment_cryptobot")
async def payment_cryptobot(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω. 100):",
        reply_markup=back_to_payment_methods_keyboard()
    )
    await state.set_state(PaymentState.waiting_for_cryptobot_amount)

@dp.message(PaymentState.waiting_for_cryptobot_amount)
async def process_cryptopay_payment(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard())
            return

        amount = Decimal(message.text.replace(',', '.'))
        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 —Ä—É–±–ª–µ–π")
            return

        invoice = await crypto_pay.create_invoice(
            currency_type="fiat",
            fiat="RUB",
            amount=str(amount),
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            accepted_assets=["USDT", "TON", "BTC", "ETH", "BNB", "TRX"],
            swap_to="USDT"
        )

        await state.update_data(amount=float(amount), invoice_id=getattr(invoice, 'invoice_id', None), attempts=0)

        pay_url = getattr(invoice, 'bot_invoice_url', None) or getattr(invoice, 'pay_url', None) or getattr(invoice, 'url', None)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_cryptobot_payment")]
        ])

        await message.answer(
            f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount:.2f} RUB ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n\n"
            "–ù–∞ –æ–ø–ª–∞—Ç—É –¥–∞—ë—Ç—Å—è 15 –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.",
            reply_markup=kb
        )
    except Exception as e:
        logger.exception(f"CryptoBot payment error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")
        await state.clear()

@dp.callback_query(F.data == "check_cryptobot_payment")
async def check_cryptobot_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("‚åõ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...")
    await asyncio.sleep(3)

    data = await state.get_data()
    invoice_id = data.get("invoice_id")
    amount = Decimal(str(data.get("amount"))) if data.get("amount") is not None else None
    attempts = data.get("attempts", 0) + 1

    if attempts > 10:
        await callback.message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(attempts=attempts)

    if not invoice_id:
        await callback.message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        invs = await crypto_pay.get_invoices(invoice_ids=[invoice_id])
        status = getattr(invs[0], 'status', None) if invs else None

        if status == "paid":
            user_id = callback.from_user.id
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (float(amount), user_id))
                await db.execute('INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                                 (user_id, float(amount), 'deposit', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot'))

                # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
                cursor = await db.execute('SELECT referrer_id FROM referrals WHERE referral_id = ?', (user_id,))
                referrer = await cursor.fetchone()
                if referrer:
                    referrer_id = referrer[0]
                    ref_bonus = float(amount) * REFERRAL_PERCENT
                    await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (ref_bonus, referrer_id))
                    await db.execute('INSERT INTO referral_earnings (referrer_id, referral_id, amount) VALUES (?, ?, ?)',
                                     (referrer_id, user_id, ref_bonus))
                    try:
                        await bot.send_message(referrer_id, f"üéâ –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å! +{ref_bonus:.2f} ‚ÇΩ")
                    except Exception:
                        pass
                await db.commit()

            await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ")
            await state.clear()
        else:
            await callback.message.answer(f"‚åõ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/10). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# -------------------- YooMoney --------------------
@dp.callback_query(F.data == "payment_yoomoney")
async def payment_yoomoney_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_to_payment_methods_keyboard())
    await state.set_state(PaymentState.waiting_for_yoomoney_amount)

@dp.message(PaymentState.waiting_for_yoomoney_amount)
async def process_yoomoney_payment(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_methods_keyboard())
            return

        amount = Decimal(message.text.replace(',', '.'))
        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 —Ä—É–±–ª–µ–π")
            return

        amount_with_fee = amount * (1 + Decimal(YOOMONEY_FEE_PERCENT))
        payment_id = str(uuid.uuid4())

        quickpay = Quickpay(
            receiver=YOOMONEY_WALLET,
            quickpay_form="shop",
            targets="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            paymentType="SB",
            sum=amount_with_fee.quantize(Decimal('0.01')),
            label=payment_id
        )

        await state.update_data(payment_id=payment_id, amount=float(amount), payment_method="yoomoney")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_yoomoney_payment")]
        ])

        await message.answer(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooMoney\n"
            f"–°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: {YOOMONEY_FEE_PERCENT*100:.0f}%\n–ò—Ç–æ–≥–æ: {amount_with_fee:.2f} ‚ÇΩ\n\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {quickpay.redirected_url}",
            reply_markup=kb
        )
    except Exception as e:
        logger.exception(f"YooMoney payment error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        await state.clear()

@dp.callback_query(F.data == "check_yoomoney_payment")
async def check_yoomoney_payment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment_id = data.get("payment_id")

    if not payment_id:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        client = Client(YOOMONEY_TOKEN)
        history = client.operation_history(label=payment_id)

        operation_found = False
        for operation in history.operations:
            if getattr(operation, 'label', None) == payment_id and getattr(operation, 'status', None) == "success":
                operation_found = True
                break

        if operation_found:
            amount = float(data.get("amount") or 0)
            user_id = callback.from_user.id
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
                await db.execute('INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                                 (user_id, amount, 'deposit', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooMoney'))

                cursor = await db.execute('SELECT referrer_id FROM referrals WHERE referral_id = ?', (user_id,))
                referrer = await cursor.fetchone()
                if referrer:
                    referrer_id = referrer[0]
                    ref_bonus = float(amount) * REFERRAL_PERCENT
                    await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (ref_bonus, referrer_id))
                    await db.execute('INSERT INTO referral_earnings (referrer_id, referral_id, amount) VALUES (?, ?, ?)',
                                     (referrer_id, user_id, ref_bonus))
                await db.commit()

            await callback.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ")
            await state.clear()
        else:
            await callback.answer("‚åõ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception(f"YooMoney check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

# -------------------- –ü–æ–∫—É–ø–∫–∞ VPN --------------------
@dp.callback_query(F.data == "buy_vpn")
async def buy_vpn(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    balance = await get_user_balance(user_id)

    if balance < VPN_SUBSCRIPTION_PRICE:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {VPN_SUBSCRIPTION_PRICE} ‚ÇΩ, —É –≤–∞—Å {balance:.2f} ‚ÇΩ.",
            reply_markup=main_menu_keyboard()
        )
        return

    await callback.message.edit_text(
        f"üîê –ü–æ–¥–ø–∏—Å–∫–∞ HappVPN –∑–∞ {VPN_SUBSCRIPTION_PRICE} ‚ÇΩ.\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=confirm_cancel_keyboard()
    )
    await state.set_state(PaymentState.waiting_for_vpn_confirmation)

@dp.callback_query(F.data == "confirm_vpn", PaymentState.waiting_for_vpn_confirmation)
async def happvpn_purchase(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()
        balance = row[0] if row else 0.0

        if balance < VPN_SUBSCRIPTION_PRICE:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            await state.clear()
            return

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        await db.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (VPN_SUBSCRIPTION_PRICE, user_id))

        # —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
        token = secrets.token_urlsafe(16)
        expires_at = datetime.now(timezone.utc) + timedelta(days=30)
        traffic_limit = 30.0

        await db.execute('INSERT OR REPLACE INTO subscriptions(user_id, token, expires_at, traffic_limit_gb) VALUES (?, ?, ?, ?)',
                         (user_id, token, expires_at.isoformat(), traffic_limit))

        # –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
        await db.execute('UPDATE users SET vpn_active_until=? WHERE user_id=?', (expires_at.isoformat(), user_id))

        await db.execute('INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                         (user_id, -VPN_SUBSCRIPTION_PRICE, 'vpn', '–ü–æ–∫—É–ø–∫–∞ HappVPN'))
        await db.commit()

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –∏ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º vpn_link
    user_uuid = str(uuid.uuid4())
    await add_vpn_link(user_id, user_uuid)

    deeplink = f"http://{DOMAIN}/subs/{token}"
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –≤ HappVPN", url=deeplink)
    kb.adjust(1)

    await callback.message.edit_text(
        f"‚úÖ HappVPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {expires_at.strftime('%d.%m.%Y')}!",
        reply_markup=kb.as_markup()
    )
    await state.clear()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

@dp.callback_query(F.data == "referral_system")
async def referral_system(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (user_id,))
        ref_count = (await cursor.fetchone())[0]
        cursor = await db.execute('SELECT COALESCE(SUM(amount), 0) FROM referral_earnings WHERE referrer_id = ?', (user_id,))
        ref_earnings = (await cursor.fetchone())[0]

    ref_link = f"https://t.me/Pro100VPN_RoBot?start={user_id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    await callback.message.edit_text(
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üíé –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}\n‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref_earnings:.2f} ‚ÇΩ\n\n"
        f"üíµ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_PERCENT*100:.0f}% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π",
        reply_markup=kb
    )

@dp.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT balance, vpn_active_until FROM users WHERE user_id = ?', (user_id,))
        user_data = await cursor.fetchone()
        balance = user_data[0] if user_data else 0
        vpn_until = user_data[1] if user_data else None

    vpn_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if vpn_until:
        try:
            until_date = datetime.fromisoformat(vpn_until)
            if until_date > datetime.now(timezone.utc):
                vpn_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {until_date.strftime('%d.%m.%Y')}"
        except Exception:
            pass

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    await callback.message.edit_text(
        f"üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\nüîê VPN –ø–æ–¥–ø–∏—Å–∫–∞: {vpn_status}\n\nID: {user_id}",
        reply_markup=kb
    )

# ============ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ============
async def check_expired_subscriptions():
    while True:
        now = datetime.now(timezone.utc)
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT user_id, expires_at FROM subscriptions")
            rows = await cursor.fetchall()
            for user_id, expires_at in rows:
                try:
                    if datetime.fromisoformat(expires_at) < now:
                        # —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—á–∏—â–∞–µ–º vpn_links
                        await db.execute("DELETE FROM subscriptions WHERE user_id = ?", (user_id,))
                        await db.execute("DELETE FROM vpn_links WHERE user_id = ?", (user_id,))
                        await db.execute("UPDATE users SET vpn_active_until=NULL WHERE user_id=?", (user_id,))
                        await db.commit()
                        try:
                            await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id}: {e}")
                except Exception:
                    pass
        await asyncio.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# ======================= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =======================
async def main():
    await init_db()
    asyncio.create_task(check_expired_subscriptions())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
